#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\usefonttheme[onlymath]{serif}
\usefonttheme[onlysmall]{structurebold}
\usepackage{color}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "times" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\newmacroname}{}
\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Itemize
Talk at a conference/colloquium.
 
\end_layout

\begin_layout Itemize
Talk length is about 20min.
 
\end_layout

\begin_layout Itemize
Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Modelagem do Acoplamento Poço-Reservatório com Variação de Propriedades
 Termodinâmicas em Reservatórios com Alto Teor de 
\begin_inset Formula $CO_{2}$
\end_inset


\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Modelagem do Acoplamento Poço-Reservatório
\end_layout

\end_inset


\end_layout

\begin_layout Author
Pires, A.
 P.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Ortiz, C.
 E.
 P.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

Bueno, A.
 D.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Remigio, S.
 A.
 E.
 
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
NERO - Núcleo Engenharia Reservatório
\end_layout

\end_inset


\end_layout

\begin_layout Institute
Laboratório Engenharia Exploração e Produção de Petróleo
\begin_inset Newline newline
\end_inset

Universidade Estadual do Norte Fluminense Darcy Ribeiro 
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
Universidade Estadual do Norte Fluminense
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
optional, but mostly needed
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Date
\begin_inset Formula $\ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Title
Software Development Approach
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Software Development Approach
\end_layout

\end_inset


\end_layout

\begin_layout Author
Pedro Henrique Linhares
\begin_inset Argument 1
status collapsed

\begin_layout Plain Layout
NERO - Núcleo Engenharia Reservatório
\end_layout

\end_inset


\end_layout

\begin_layout Institute
Universidade Estadual do Norte Fluminense Darcy Ribeiro
\begin_inset Newline newline
\end_inset

Laboratório de Engenharia e Exploração de Petróleo
\end_layout

\begin_layout Date
Macaé, June 2014
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{institution-logo-filename}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Sumário}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\end_deeper
\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Programming languages
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Definition
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A programming language is an artificial language designed to communicate
 instructions to a machine, particularly a computer.
 Programming languages can be used to create programs to control the behavior
 of a machine or to express algorithms.
\end_layout

\begin_layout Itemize
Over the years, hundreds of programming languages have been created with
 different sintaxes and purposes.
 As the time passed, they began being classified into generations.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Programming languages generations
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Today, these languages can be classifed into five programming language generatio
ns.
 Historically, this classification was used to indicate increasing power
 of programming styles.
\end_layout

\begin_layout Itemize
As higher the language gets in the generation's scale, more layers of abstractio
n are added above the machine-code program.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
First Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Use a binary code that consists of strings of only zeroes (0) and ones.
 (1).
 The use of binary code is very difficult to learn and use.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
First Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Example of binary code
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "binary_code"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Second Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
These are Assembly languages that use mnemonics code that consists of very
 short words for commands.
\end_layout

\begin_layout Itemize
Assembly language programs need to be converted into machine language by
 an assembler before it can be run.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Second Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Hello World in Assembly
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Third Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Introduced data and control structures .
 Third generation languages are portable or machine independent where a
 program written from one computer can also be used by another computer
 however the source code must be recompiled by a language compiler by the
 other computer.
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Fortran, Algol, Pascal and C are examples of this.
 As they are compiled languages, the compiled code is a first generation
 machine code and for being so close to what computers can understand, the
 executable code can run very fast.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Third Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Hello World in Fortran
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fourth Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A fourth generation programming language is a grouping of programming languages
 that attempt to get closer than 3GLs (Third Generation Language) to human
 language, form of thinking and conceptualization.
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
These programming languages are usually interpreted and often used for prototypi
ng.
 Most of interpreted language implementations execute instructions directly,
 without previously compiling a program into machine-language instructions.
 Examples are: Python, Ruby, Perl, Matlab, Tcl, etc.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fourth Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
However, by not being previously compiled, they can reduce programming effort,
 the time it takes to develop software, and the cost of software development.
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Given the right problem, the use of an appropriate 4GL can be spectacularly
 successful and the productivity gains can get as high as 8 times faster
 than in a 3GL.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fourth Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Hello World in Python
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fourth Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
As you add more layers above the machine and get closer to the programmer,
 you write a more concise and straightforward code although losing performance.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fifth Generation
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Is a programming language based on solving problems using constraints given
 to the program, rather than using an algorithm written by a programmer.
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
They are designed to make the computer solve a given problem without the
 programmer.
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Includes constraint-based and logic programming languages and some declarative
 languages.
 Prolog, OPS5 and Mercury are examples.
\end_layout

\end_deeper
\begin_layout Subsection
Proposed software developmet approach
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Approach
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Considering those different types of languages, and while trying to get
 the best results in development and processing time, we have come to the
 conclusion that there is value in using an intrepreted fourth generation
 language to prototype the software and after having the final version,
 implement the code in a compiled language such as Fortran and C++.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Approach
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
It has proven to be valuable because as we were not so familiar with the
 subject we are researching, with a interpreted language, we could go straight
 to start learning and solving the problem in a easier and simpler process.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Approach
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Ultimately, in the software development process, our goal is to get from
 point A to point B, which is our final product, as seen in the Figure below:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Software goal
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Approach
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
However, along the way, we end up facing several problems and sometimes
 being stuck at dead end points as seen below:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Dead ends in the software development process
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Approach
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
With prototyping, we can reduce drastically the time spent with this kind
 of problem.
 
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Areas improved by prototyping
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Basic Approach
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
However, we believe that will come a time, where due to the slower time
 execution, it will be better to implement directly into a 3GL language
 like Fortran/C++ as execution time can get as high as days to finish the
 execution of a test case.
 But at that point, knowledge about the problem will be much higher.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Development time x Execution time
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Python/MatLab and Fortran/C++
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
With all being said, we have been using Python and MatLab to prototype because
 it is fast to develop and has a good amount of scientific libraries available.
 We have also been using Fortran 2003 and C++ to implement code that needs
 to have high performance in processing time.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Section
Tube Shocks Simulation
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Problem
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Solve the single-phase, single-component flow of a fluid in a pipe, considering
 the axial flow direction.
\end_layout

\end_deeper
\begin_layout Itemize
Single-phase flow;
\end_layout

\begin_layout Itemize
Monocomponent fluids;
\end_layout

\begin_layout Itemize
There is no heat exchange between the environment and pipe;
\end_layout

\begin_layout Itemize
Heat flow.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fortran
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What has been used to develop this code:
\end_layout

\begin_layout Itemize
Classes and objects;
\end_layout

\begin_layout Itemize
inherintance;
\end_layout

\begin_layout Itemize
polymorphism;
\end_layout

\begin_layout Itemize
Dynamic allocation;
\end_layout

\begin_layout Itemize
Modules;
\end_layout

\begin_layout Itemize
UMFPack (set of routines for solving sparse linear systems).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fortran vs Python
\end_layout

\end_inset


\end_layout

\begin_layout Frame
Lines of code:
\end_layout

\begin_layout Frame
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Pyhon: 2400 lines
\end_layout

\begin_layout Itemize
Fortran: 4000 lines
\end_layout

\begin_layout Standard
A Total of 40% more code.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fortran vs Python Performance
\end_layout

\end_inset


\end_layout

\begin_layout Frame
The same example was run in Python and in Fortran.
 The Fortran code executed on a average of 20x faster.
\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Section
Software testing
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Testing with a Purpose
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Testing of individual software components or modules.
 Typically done by the programmer, as it requires detailed knowledge of
 the internal program design and code.
 The overall objective to not to find every software bug that exists, but
 to uncover situations that could negatively impact the usability and/or
 maintainability, while also, helping the programmer identify areas of code
 that could be responsible for a bug.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Why to test?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Some advantages of software testing:
\end_layout

\begin_layout Itemize
Verify that code presents the expected output;
\end_layout

\begin_layout Itemize
Verify that we are doing the right software that follows the user requirements;
\end_layout

\begin_layout Itemize
Guarantee manutenability and safety while chaging the code as it grows;
\end_layout

\begin_layout Itemize
Finding bugs becomes much easier.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Why to test?
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In a big software, when a bug occurs, it is usually very hard to track down
 the source of the problem.
 The programmer would have to try to isolate parts of the code and verify
 if it outputs correctly in order to surround the issue.
 
\begin_inset Newline newline
\end_inset

Automated software testing can help the developer to identify problematic
 code in several levels depending on the type of test implemented.
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Subsection
Types of tests
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Types of tests
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
There are several types of test, the most important are:
\end_layout

\begin_layout Itemize
Unit testing: tests the smallest code units (subroutines and functions);
\end_layout

\begin_layout Itemize
Integration testing: tests the integration among modules and verify the
 interfaces between components;
\end_layout

\begin_layout Itemize
System testing: tests a completely integrated system to verify that it meets
 its requirements;
\end_layout

\begin_layout Itemize
Acceptance testing: When the system is delivered to the final user for acceptanc
e.
\begin_inset Note Note
status open

\begin_layout Plain Layout
For example, a system test might involve testing a logon interface, then
 creating and editing an entry, plus sending or printing results, followed
 by summary processing or deletion (or archiving) of entries, then logoff.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unit testing
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The type of code we are mainly using in this project.
 We have been using to test the python classes and also the Fortran classes.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unit testing
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
It works by doing basic assertions about the code, examples are:
\end_layout

\begin_layout Itemize
assert a expression is true or false;
\end_layout

\begin_layout Itemize
assert that two values are equal;
\end_layout

\begin_layout Itemize
assert a number is equal within a interval;
\end_layout

\begin_layout Itemize
assert that two arrays are equal.
\end_layout

\begin_layout Standard
The programmer should try to make its tests more comprehensive as possible.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Subsection
Testing examples
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Example of a python class implementation:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
A Python Class
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The corresponding test case for the Python class:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
A Python unit test
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fortran example
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Fortran 2003 methods
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Fortran example
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Fortran test case
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Section
Overwiew of the software development state
\end_layout

\begin_layout Subsection
Thermodynamics
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Thermodynamics
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Thermodynamic's module development overwiew
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Subsection
Well
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Well - Implementation with Prototyping and Code Conversion
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Well's module development overwiew
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Well - Implementation with Prototyping and Code Conversion
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Advantages:
\end_layout

\begin_layout Itemize
Faster to get to a functional version, generate graphs, get initial results,
 etc.
\end_layout

\begin_layout Standard
Disadvantages:
\end_layout

\begin_layout Itemize
Need to rewrite the code;
\end_layout

\begin_layout Itemize
executable code is slower.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Subsection
Termodynamic and Well final Packages
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Termodynamics and Well
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
At the end of development, we expect to have this software packages configuratio
n:
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Final Packages Integration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Section
Future activities
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Future activities
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Finish the numerical modeling;
\end_layout

\begin_layout Itemize
Find the best way to integrate all this different languages, and make they
 communicate;
\end_layout

\begin_layout Itemize
Finish implementation:
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Matlab/Python/Fortran/C++;
\end_layout

\end_deeper
\begin_layout Itemize
Test integration between the generated libraries and PVT-Phase-GUI.
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator parbreak
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Acknowledgements
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsCenterAligned
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/andreduartebueno/Dropbox/Imagens/AnaliseImagens/0-SequenciaProcessos/imagem_digital.tif
	width 50text%

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_body
\end_document
